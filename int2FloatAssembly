
int2Float:

  @ load values from memory
  setdes $r0     @ set r0 to write (intUpper)
  ldw #0         @ load value at mem address #0 from LUT to r0
  setdes $r1     @ set r1 to write (intLower)
  ldw #1         @ load value at mem address #1 from LUT to r1

  @ get sign bit  
  mov #7         @ move 7 to r7
  setdes $r2     @ set r2 to write (Sign bit)
  setsrc $r0     @ set r0 as source
  lsr $r7        @ r2 = r0 >> 7
  mov #1         @ move 1 to r7
  setsrc $r2     @ set r2 as source
  and $r7        @ r2 = r2 & 1

  mov #7         @ move 7 to r7
  setdes $r3     @ set r3 to write (Exponent)
  setsrc $r7     @ set r7 as source
  and $r7        @ r3 = r7 & r7
  mov #1         @ move 1 to r7
  setsrc $r3     @ set r3 as source
  lsl $7         @ r3 = r3 << 1
  
  @ take 2's comp if negative
  mov #0         @ move 0 to r7
  setsrc $r2     @ set r2 as source
  seq $r7        @ set flag if sign bit = 0
  beq #000000    @ branch to getexp if sign bit = 0
  setdes $r0     @ set r0 to write
  not $r0        @ r0 = ~r0
  setdes $r1     @ set r1 to write
  not $r1        @ r1 = ~r1
  movl #3        @ move -1 to r7
  setsrc $r1     @ set r1 as source
  seq $r7        @ set flag if r1 = -1
  beq #000001    @ branch to checkoverf if lower byte = -1
  setsrc $r1     @ set r1 as source
  setdes $r1     @ set r1 to write
  movl #3        @ move -1 to r7
  sub $r7        @ r1 = r1 - (-1)
  b #000010      @ branch to exponent

checkoverf:
  movl #4        @ move 0x7f to r7
  setsrc $r0     @ set r0 as source
  seq $r7        @ set flag if r7 = 0x7f
  beq #000011    @ branch to overflow on equal
  movl #3        @ move -1 to r7
  setdes $r0     @ set r0 to write
  sub $r7        @ r0 = r0 - (-1)
  setdes $r1     @ set r1 to write
  setsrc $r1     @ set r1 as source
  sub $r7        @ r1 = r1 - (-1)
  b #000100      @ branch to getexp
  
overflow:
  @ set value to 0 on overflow
  setsrc $r7     @ set r7 as source
  setdes $r0     @ set r0 to write
  mov #0         @ move 0 to r7
  sub $r7        @ r0 = 0 - 0
  setdes $r1     @ set r1 to write
  sub $r7        @ r1 = 0 - 0
  b #000101      @ branch to done

getexp:
  @ mantissaUpper in r0, mantissaLower in r1
  mov #1         @ move 1 to r7
  setdes $r0     @ set r0 to write
  setsrc $r0     @ set r0 as source
  lsl $r7        @ r0 = r0 << 1
  mov #0         @ move 0 to r7
  
  @ check for highest bit in upper byte
  seq $r7        @ set flag if r0 = 0
  beq #000110    @ branch to else1

while:
  setdes $r4     @ set r4 to write
  setsrc $r0     @ set r0 as source
  mov #7         @ move 7 to r7
  lsr $r7        @ r4 = r0 >> 7
  mov #1         @ move 1 to r7
  setsrc $r4     @ set r4 as source
  and $r7        @ r4 = r4 & 1
  mov #0         @ move 0 to r7
  seq $r7        @ set flag if r4 = 0
  beq #000111    @ branch to body of loop
  setsrc $r7     @ set r7 as source
  setdes $r5     @ set r5 to write
  mov #1         @ move 1 to r7
  lsl $r7        @ r5 = 1 << 1
  setsrc $r5     @ set r5 as source
  lsl $r7        @ r5 = r5 << 1
  setsrc $r7     @ set r7 as source
  lsl $r5        @ r5 = 1 << 4
  setsrc $r5     @ set r5 as source
  sub $r3        @ r5 = 16 - r3
  setdes $r0     @ set r0 to write
  setsrc $r0     @ set r0 as source
  lsl $r5        @ r0 = r0 << r5
  lsr $r5        @ r0 = r0 << r5
  b #001000      @ branch to expfound  

body:
  setsrc $r3     @ set r3 as source
  mov #1         @ move 1 to r7
  setdes $r3     @ set r3 to write
  sub $r7        @ r3 = r3 - 1
  setdes $r0     @ set r0 to write
  setsrc $r0     @ set r0 as source
  lsl $r7        @ r0 = r0 << 1
  b #001001      @ branch to while


else1:
  @check lower byte for a 1
  mov #0         @ move 0 to r7
  setsrc $r1     @ set r1 as source
  seq $r7        @ set flag if r1 = 0
  beq #001010    @ branch to else2 if no 1 found in lower
  mov #7         @ move 7 to r7
  setdes $r3     @ set r3 to write
  setsrc $r3     @ set r3 as source
  sub $r7        @ r3 = r3 - 7
while2:
  setdes $r4     @ set r4 to write
  setsrc $r1     @ set r1 as source
  lsr $r7        @ r4 = r1 >> 7
  mov #1         @ move 1 to r7
  setsrc $r4     @ set r4 as source
  and $r7        @ r4 = r4 & 1
  mov #0         @ move 0 to r7
  seq $r7        @ set flag if r4 = 0
  beq #001011    @ branch to body 2 if r4 = 0
  mov #2         @ move 2 to r7
  setdes $r5     @ set r5 to write
  setsrc $r7     @ set r7 as source
  lsl $r7        @ r5 = 2 << 2
  setsrc $r5     @ set r5 as source
  sub $r3        @ r5 = 8 - r3
  setsrc $r1     @ set r1 as source
  setdes $r1     @ set r1 to write
  lsl $r5        @ r1 = r1 << r5
  lsr $r5        @ r1 = r1 >> r5
  b #001100      @ branch to expfound
  b #001101      @ branch to done

body2:
  mov #1         @ move 1 to r7
  setsrc $r3     @ set r3 as source
  setdes $r3     @ set r3 to write
  sub $r7        @ r3 = r3 - 1
  setsrc $r1     @ set r1 as source
  setdes $r1     @ set r1 to write
  lsl $r7        @ r1 = r1 << 1
  b #001110      @ branch to while2

else2:
  mov #0         @ move 0 to r7
  setsrc $r2     @ set r2 as source
  seq $r7        @ set flag if r2 = 0
  beq #001111    @ branch to zero
  
  @ value is max negative number
  mov #0         @ move 0 to r7
  setsrc $r7     @ set r7 as source
  setdes $r4     @ set r4 to write
  sub $r7        @ r4 = 0 - 0
  setdes $r5     @ set r5 to write
  sub $r7        @ r5 = 0 - 0
  setdes $r4     @ set r4 to write
  movl #2        @ move 15 from LUT to r7
  setsrc $r4     @ set r4 as source
  sub $r7        @ r4 = 0 - 15
  setsrc $r3     @ set r3 as source
  setdes $r3     @ set r3 to write
  sub $r4        @ r3 = r3 - (-15)
  movl #3        @ move 0xff to r7
  setsrc $r7     @ set r7 as source
  setdes $r1     @ set r1 to write
  sub $r5        @ r1 = 0xff - 0
  setdes $r5     @ set r5 to write
  sub $r5        @ r5 = r1 - 0
  mov #3         @ move 3 to r7
  and $r7        @ r5 = r5 & 3
  mov #0         @ move 0 to r7
  setdes $r4     @ set r4 to write
  setsrc $r7     @ set r7 as source
  sub $r7        @ r4 = 0 - 0
  mov #4         @ move 4 to r7
  sub $r4        @ r4 = 4 - 0
  mov #5         @ move 5 to r7
  lsl $r7        @ r4 = 4 << 5
  setdes $r5     @ set r5 to write
  setsrc $r5     @ set r5 as source
  or $r4         @ or with sign bit
  mov #2         @ move 2 to r7
  setsrc $r3     @ set r3 as source
  setdes $r3     @ set r3 to write
  lsl $r7        @ r3 = r3 << 2
  setsrc $r5     @ set r5 as source
  setdes $r0     @ set r0 as dest
  or $r3         @ r0 = r5 | r3
  b #010000      @ branch to done 

zero:
  mov #0         @ move 0 to r7
  setdes $r0     @ set r0 to write
  setsrc $r7     @ set r7 as source
  sub $r7        @ r0 = 0
  setdes $r1     @ set r1 to write
  sub $r7        @ r1 = 0
  b #010001      @ branch to done

expfound:
  movl #5        @ move 10 from LUT to r7
  setsrc $r3     @ set r3 as source
  setdes $r4     @ set r4 to write
  sub $r7        @ r4 = r3 - 10
  mov #0         @ move 0 to r7
  setsrc $r7     @ set r4 as source
  slt $r4        @ set flag if 0 < r4 (branch on large exponent)
  blt #010010    @ branch to largeexp
  
  @ small exponent, left shifting
  movl #5        @ move 10 to r7
  setdes $r4     @ set r4 to write (ejected)
  setsrc $r7     @ set r7 as source
  sub $r3        @ r4 = 10 - r3
  mov #1         @ move 1 to r7
  lsl $r4        @ r4 = 1 << r4
  setsrc $r4     @ set r4 as source
  sub $r7        @ r4 = r4 - 1 @ mask 
  setdes $r5     @ set r5 to write 
  movl #5        @ move 10 from lut to r7
  setsrc $r7     @ set r7 as source
  sub $r3        @ r5 = 10 - r3
  mov #2         @ move 2 to r7
  setdes $r7     @ set r7 to write
  lsl $7         @ r7 = 2 << 2
  setdes $r5     @ set r5 to write
  sub $r5        @ r5 = 8 - r5
  setsrc $r1     @ set r1 as source
  lsr $r5        @ r5 = r1 >> r5
  setsrc $r5     @ set r5 as source
  setdes $r4     @ set r4 to write (stores ejected lower bits)
  and $r4        @ r4 = r5 & r4
  movl #5        @ move 10 to r7
  setdes $r5     @ set r5 to write
  setsrc $r7     @ set r7 as source
  sub $r3        @ r5 = 10 - r3
  setdes $r1     @ set r1 to write
  setsrc $r1     @ set r1 as source
  lsl $r5        @ r1 = r1 << r5
  setsrc $r0     @ set r0 as source
  setdes $r0     @ set r0 to write
  lsl $r5        @ r0 = r0 << r5
  or $r4         @ r0 = r0 | r4
  mov #7         @ move 7 to r7
  setdes $r2     @ set r2 to write
  setsrc $r2     @ set r2 as source
  lsl $r7        @ r2 = r2 << 7
  setdes $r0     @ set r0 to write
  or $r0         @ r0 = r2 | r0
  mov #0         @ move 0 to r7
  setdes $r5     @ set r5 to write
  setsrc $r7     @ set r7 as source
  sub $r7        @ r5 = 0 - 0
  movl #2        @ move 15 to r7
  setsrc $r5     @ set r5 as source
  sub $r7        @ r5 = 0 - 15
  setsrc $r3     @ set r3 as source
  setdes $r3     @ set r3 to write
  sub $r5        @ r3 = r3 - (-15) (add bias)
  mov #2         @ move 2 to r7
  lsl $r7        @ r3 = r3 << 2
  setdes $r0     @ set r0 to write
  or $r0         @ r0 = r0 | r3
  b #010011      @ branch to done

largeexp:
  setdes $r4     @ set r4 to write (exponent - 10)
  movl #5        @ move 10 to r7
  setsrc $r3     @ set r3 as source
  sub $r7        @ r4 = r3 - 10 
  setdes $r5     @ set r5 to write (ejected lower bits)
  sub $r7        @ r5 = r3 - 10
  mov #1         @ move 1 to r7
  setsrc $r7     @ set r7 as source
  lsl $r5        @ r5 = 1 << r5
  setsrc $r5     @ set r5 as source
  sub $r7        @ r5 = r5 - 1 (mask)
  mov #0         @ move 0 to r7
  setdes $r6     @ set r6 to write (ejected upper)
  sub $r7        @ r6 = r5 - 0
  setsrc $r6     @ set r6 as source
  and $r0        @ r6 = r6 & r0
  setsrc $r5     @ set r5 as source
  setdes $r5     @ set r5 to write
  and $r1        @ r5 = r5 & r1
  setdes $r1     @ set r1 to write
  setsrc $r1     @ set r1 as source
  lsr $r4        @ r1 = r1 >> r4
  mov #2         @ move 2 to r7
  setsrc $r7
  setdes $r7
  lsl $r7        @ r7 = 2 << 2
  sub $r4        @ r7 = 8 - r4
  setsrc $r6     
  lsr $r7        @ r7 = r6 << r7
  setsrc $r1   
  setdes $r1 
  or $r7         @ r1 = r1 | r7
  setsrc $r0 
  setdes $r0
  lsr $r4        @ r0 = r0 >> r4
  mov #7     
  setdes $r7
  setsrc $r2
  lsl $r7        @ r7 = r2 << 7
  setdes $r0     
  setsrc $r7
  or $r0         @ r0 = r0 | r7
  mov #0
  setdes $r6
  sub $r7
  movl #2        @ move 15 to r7 
  setsrc $r6     @ set r6 to source
  sub $r7        @ r6 = 0 - 15
  setsrc $r3     @ set r3 to source
  sub $r6        @ r6 = r3 - (-15)
  mov #2
  lsl $r7        @ r6 = r6 << 2
  setsrc $r0     @ set r0 as source
  setdes $r0     @ set r0 to write
  or $r6         @ r0 = r0 | r6
done
  setsrc $r0     @ set r0 as source
  stw #7         @ store value in r0 to mem address in #7 LUT
  setsrc $r1     @ set r1 as source
  stw #6         @ store value in r1 to mem address in #6 LUT
  done


